#define OBJNUM (@ObjNum)

#define MaxSDF 1000000000
#define MaxTraceDis 100
#define MaxTraceTime 100
#define TraceThre (@TraceThre)
#define NormalEpsilon (@NormalEpsilon)

#define SceneSDFShadowNormalBias 0.001

#define SceneSDFSoftShadowBias 0.1
#define SceneSDFSoftShadowK 16

#include "../../../HLSL/PBR/PBRCommonDef.hlsl"
#include "../../../HLSL/PBR/PBR_IBL.hlsl"
#include "../../../HLSL/PBR/PBR_GGX.hlsl"
#include "../../../HLSL/UV/UVCommonDef.hlsl"

###BLOCK ExtraInclude
...
###BLOCK

Material_PBR GetObjMaterial_PBR(int obj)
{
	Material_PBR re;
	Init(re);

	###BLOCK ObjMaterial
	... 
	###BLOCK
	return re;
}

int GetObjRenderMode(int obj)
{
	###BLOCK ObjRenderMode
	... 
	###BLOCK
}

float2 GetObjUV(in HitInfo minHit)
{
	###BLOCK ObjUV
	... 
	###BLOCK
}

void GetObjTB(inout float3 T, inout float3 B, in HitInfo minHit)
{
	int inx = minHit.obj;
	T=0;
	B=0;
	###BLOCK ObjTB
	... 
	###BLOCK
}

void ObjPreRender(inout int mode, inout Material_PBR mat, inout Ray ray, inout HitInfo minHit)
{
	###BLOCK ObjPreRender
	... 
	###BLOCK
}

void ObjPostRender(inout float3 result, inout int mode, inout Material_PBR mat, inout Ray ray, inout HitInfo minHit)
{
	###BLOCK ObjPostRender
	... 
	###BLOCK
}

float4 RenderSceneObj(Ray ray, inout HitInfo minHit, out Material_PBR mat, inout ExtraInfo extra)
{
	mat = GetObjMaterial_PBR(minHit.obj);
	int mode = GetObjRenderMode(minHit.obj);
	ObjPreRender(mode, mat, ray, minHit);
	float4 result = float4(0,0,0,1);
	###BLOCK ObjRender
	... 
	###BLOCK
	//ObjPostRender(result, mode, mat, ray, minHit);
	return result;
}


float HardShadow_TraceScene(Ray ray, out HitInfo info, float maxLength = MaxSDF);
float Expensive_HardShadow_TraceScene(Ray ray, out HitInfo info, float maxLength = MaxSDF);
float SoftShadow_TraceScene(Ray ray, out HitInfo info, float maxLength = MaxSDF);

float GetDirHardShadow(float3 lightDir, in HitInfo minHit, float maxLength = MaxSDF)
{
	Ray ray;
	ray.pos = minHit.P;
	ray.dir = -lightDir;
	ray.pos += ray.dir*TraceThre*2 + minHit.N*TraceThre*2;
	HitInfo hitInfo;
	return HardShadow_TraceScene(ray, hitInfo, maxLength);
}

float GetDirSoftShadow(float3 lightDir, in HitInfo minHit, float maxLength = MaxSDF)
{
	Ray ray;
	ray.pos = minHit.P;
	ray.dir = -lightDir;
	ray.pos += ray.dir*TraceThre*2 + minHit.N*TraceThre*2;
	HitInfo hitInfo;
	return SoftShadow_TraceScene(ray, hitInfo, maxLength);
}

float RenderSceneSDFShadow(HitInfo minHit)
{
	float sha = 1;
	###BLOCK SDFShadow
	... 
	###BLOCK
}

//###################################################################################
#include "../../../HLSL/SDFGame/SDFCommonDef.hlsl"
#include "../../../HLSL/Noise/NoiseCommonDef.hlsl"

//tutorial: iq modeling https://www.youtube.com/watch?v=-pdSjBPH3zM

###BLOCK ExtraSDF
...
###BLOCK

float GetObjSDF(int inx, float3 p, in TraceInfo traceInfo, inout ExtraInfo extra)
{
	###BLOCK ObjSDF
	...
	###BLOCK
}

float3 GetObjSDFNormal(int inx, float3 p, in TraceInfo traceInfo, in ExtraInfo extra, float eplisonScale = 1.0f)
{
	float normalEpsilon = NormalEpsilon;
	###BLOCK BeforeObjSDFNormal
	...
	###BLOCK
	return normalize(float3(
		GetObjSDF(inx, float3(p.x + NormalEpsilon*eplisonScale, p.y, p.z), traceInfo,extra) - GetObjSDF(inx, float3(p.x - NormalEpsilon*eplisonScale, p.y, p.z), traceInfo,extra),
		GetObjSDF(inx, float3(p.x, p.y + NormalEpsilon*eplisonScale, p.z), traceInfo,extra) - GetObjSDF(inx, float3(p.x, p.y - NormalEpsilon*eplisonScale, p.z), traceInfo,extra),
		GetObjSDF(inx, float3(p.x, p.y, p.z + NormalEpsilon*eplisonScale), traceInfo,extra) - GetObjSDF(inx, float3(p.x, p.y, p.z - NormalEpsilon*eplisonScale), traceInfo,extra)
		));
}

float3 GetObjNormal(int inx, in Ray ray, in TraceInfo traceInfo, inout ExtraInfo extra)
{
	###BLOCK ObjNormal
	...
	###BLOCK
}

//Not used,can be used to trace from inside to outside
void TraceScene2(Ray ray, out HitInfo info);

//Main
void TraceScene(Ray ray, out HitInfo info, inout ExtraInfo extra)
{
	float traceThre = TraceThre;

	###BLOCK BeforeTraceScene
	...
	###BLOCK

	Init(info);

	TraceInfo traceInfo;
	Init(traceInfo,MaxSDF);

	float objSDF[OBJNUM];
	bool innerBoundFlag[OBJNUM];
	float innerBoundStepScale[OBJNUM];
	int objInx = -1;
	float sdf = MaxSDF;
	float minSDF = MaxSDF;
	bool bInnerBound = false;

	while (traceInfo.traceCount <= MaxTraceTime)
	{
		objInx = -1;
		sdf = MaxSDF;
		minSDF = MaxSDF;
		bInnerBound = false;
		for (int inx = 0; inx < OBJNUM; inx++)
		{
			innerBoundFlag[inx] = false;
			innerBoundStepScale[inx] = 1;
		}

		###BLOCK CheckInnerBound
		...
		###BLOCK

		if(bInnerBound)
		{
			for (int inx = 0; inx < OBJNUM; inx++)
			{
				if(innerBoundFlag[inx])
				{
					objSDF[inx] = GetObjSDF(inx, ray.pos, traceInfo, extra) * innerBoundStepScale[inx];
					if (objSDF[inx] < sdf)
					{
						sdf = objSDF[inx];
						objInx = inx;
					}
				}
			}
		}
		else
		{
			for (int inx = 0; inx < OBJNUM; inx++)
			{
				objSDF[inx] = GetObjSDF(inx, ray.pos, traceInfo, extra);
				sdf = min(sdf,objSDF[inx]);
				if(objSDF[inx]<minSDF)
				{
					minSDF = objSDF[inx];
					objInx = inx;
				}
			}
		}

		if(objInx == -1)
		{
			break;
		}

		if (sdf > MaxTraceDis)
		{
			break;
		}

		if (sdf <= traceThre)
		{
			info.bHit = true;
			info.obj = objInx;
			info.N = GetObjNormal(objInx, ray, traceInfo, extra);
			info.P = ray.pos;
			break;
		}
		ray.pos += sdf * ray.dir;
		Update(traceInfo,sdf);
	}
}

void TraceScene2(Ray ray, out HitInfo info)
{
	float traceThre = TraceThre;

	Init(info);

	TraceInfo traceInfo;
	Init(traceInfo,MaxSDF);

	float objSDF[OBJNUM];
	bool innerBoundFlag[OBJNUM];
	float innerBoundStepScale[OBJNUM];
	int objInx = -1;
	float sdf = MaxSDF;
	bool bInnerBound = false;

	while (traceInfo.traceCount <= MaxTraceTime)
	{
		objInx = -1;
		sdf = MaxSDF;
		bInnerBound = false;
		for (int inx = 0; inx < OBJNUM; inx++)
		{
			innerBoundFlag[inx] = false;
			innerBoundStepScale[inx] = 1;
		}


		//if(bInnerBound)
		//{
		//	for (int inx = 0; inx < OBJNUM; inx++)
		//	{
		//		if(innerBoundFlag[inx])
		//		{
		//			objSDF[inx] = GetObjSDF(inx, ray.pos, traceInfo) * innerBoundStepScale[inx];
		//			if (objSDF[inx] < sdf)
		//			{
		//				sdf = objSDF[inx];
		//				objInx = inx;
		//			}
		//		}
		//	}
		//}
		//else
		//{
		//	for (int inx = 0; inx < OBJNUM; inx++)
		//	{
		//		objSDF[inx] = GetObjSDF(inx, ray.pos, traceInfo);
		//		if (objSDF[inx] < sdf)
		//		{
		//			sdf = objSDF[inx];
		//			objInx = inx;
		//		}
		//	}
		//}

		//if(objInx == -1)
		//{
		//	break;
		//}
		//
		//if (sdf > MaxTraceDis)
		//{
		//	break;
		//}
		//
		//if (abs(sdf) <= traceThre)
		//{
		//	info.bHit = true;
		//	info.obj = objInx;
		//	info.N = GetObjNormal(objInx, ray, traceInfo);
		//	info.P = ray.pos;
		//	break;
		//}
		//ray.pos -= sdf * ray.dir;
		//Update(traceInfo,sdf);
	}
}

###BLOCK ExtraFuncDependOnTraceScene
		...
###BLOCK

void SetIndirectColor(inout float3 re, float3 seed, Ray ray, HitInfo minHit, Material_PBR mat)
{
	###BLOCK IndirectColor
	... 
	###BLOCK
}