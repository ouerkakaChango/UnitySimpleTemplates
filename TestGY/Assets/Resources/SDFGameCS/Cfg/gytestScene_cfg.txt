valMaps:
//@@@SDFBakerMgr ValMaps
ObjNum 1
//@@@
TraceThre 0.001
NormalEpsilon 0.01

Blocks:

###BLOCK ExtraInclude
#include "../../../HLSL/Random/RandUtility.hlsl"
#include "../../../HLSL/Noise/NoiseCommonDef.hlsl"
#include "../../../HLSL/Transform/TransformCommonDef.hlsl" 
#include "../../../HLSL/SDFGame/SDFCommonDef.hlsl"
#include "../../../HLSL/MatLib/CommonMatLib.hlsl"
float daoScale;

//@@@SDFBakerMgr TexSys
Texture3D<float> HalfSphereSDF3D;
Texture3D<float3> Norm_Bunny;
//@@@

//@@@SDFBakerMgr DyValSys
//@@@

float GetPntlightAttenuation(float3 pos, float3 lightPos)
{
	//return 1;
	float d = length(pos - lightPos);
	return saturate(1 / (d*d));
	//return 1 / (1 + 0.01*d + 0.005*d*d);
}

void SH_AddLightDirectional( inout float3 sh[9], in float3 col, in float3 v )
{
    float DI = 64;
	
	sh[0] += col * (21.0/DI);
	sh[0] -= col * (15.0/DI) * v.z*v.z;
	sh[1] += col * (32.0/DI) * v.x;
	sh[2] += col * (32.0/DI) * v.y;
	sh[3] += col * (32.0/DI) * v.z;
	sh[4] += col * (60.0/DI) * v.x*v.z;
	sh[5] += col * (60.0/DI) * v.z*v.y;
	sh[6] += col * (60.0/DI) * v.y*v.x;
	sh[7] += col * (15.0/DI) * (3.0*v.z*v.z-1.0);
	sh[8] += col * (15.0/DI) * (v.x*v.x-v.y*v.y);
}

float3 SH_Evalulate( in float3 v, in float3 sh[9] )
{
	return sh[0] +
           sh[1] * v.x +
           sh[2] * v.y +
           sh[3] * v.z +
           sh[4] * v.x*v.z +
           sh[5] * v.z*v.y +
           sh[6] * v.y*v.x +
           sh[7] * v.z*v.z +
           sh[8] *(v.x*v.x-v.y*v.y);
}

###BLOCK

###BLOCK ExtraFuncDependOnTraceScene
###BLOCK

###BLOCK ObjMaterial
//@@@SDFBakerMgr ObjMaterial
if(obj == 0 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
re.reflective = 0;
re.reflect_ST = float2(1, 0);
}
//@@@
###BLOCK

###BLOCK ObjRenderMode
//@@@SDFBakerMgr ObjRenderMode
int renderMode[1];
renderMode[0] = 444;
return renderMode[obj];
//@@@
###BLOCK

###BLOCK ObjUV
	float2 uv = 0;
	int inx = minHit.obj;
	//@@@SDFBakerMgr ObjUV
if(inx == 0 )
{
}
	//@@@

	//----------------------------------

	//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
	//@@@
	if(inx <0)
	{
		uv = SimpleUVFromPos(minHit.P,minHit.N, float3(1,1,1));
	}
return uv;
###BLOCK

###BLOCK ObjTB
//@@@SDFBakerMgr ObjTB
if(inx == 0 )
{
}
//@@@
basis_unstable(minHit.N, T, B);
###BLOCK

###BLOCK  ObjPreRender
int inx = minHit.obj;
//@@@SDFBakerMgr ObjMatLib

//@@@

//@@@SDFBakerMgr ObjImgAttach

//@@@

//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
//@@@

//float2 q = minHit.P.xz;
//float dis = 20;
//float m = floor(minHit.P.y/dis);
//
//if(ShowInt(q,m))
//{
//	mat.albedo = float3(0,1,0);
//}

###BLOCK

###BLOCK ObjRender
//@@@SDFBakerMgr ObjRender
if(mode==0)
{
  float3 lightDirs[1];
  float3 lightColors[1];
  lightDirs[0] = float3(-0.3213938, -0.7660444, 0.5566705);
  lightColors[0] = float3(0.8705883, 0.8784314, 0.882353);
  result.rgb = 0.1 * mat.albedo * mat.ao;
  for(int i=0;i<1;i++)
  {
      result.rgb += PBR_GGX(mat, minHit.N, -ray.dir, -lightDirs[i], lightColors[i]);
  }
}
//@@@
else if (mode == 1)
{
	//result.rgb = PBR_IBL(envSpecTex2DArr, mat, minHit.N, -ray.dir);
}
//else if (mode == 2)
//{
//	//object reflection IBL
//	//bool isPNGEnv=false;
//	//Texture2DArray tempEnv;
//	//GetEnvTexArrByObj(minHit.obj, isPNGEnv, tempEnv);
//	//if(isPNGEnv)
//	//{
//	//	//result.rgb = PBR_IBL(tempEnv, mat, minHit.N, -ray.dir,1,1,true,true);
//	//}
//	//else
//	//{
//	//	//result.rgb = PBR_IBL(tempEnv, mat, minHit.N, -ray.dir);
//	//}
//}
else if (mode == 3)
{
	//lightmap mode
	//result.rgb = mat.albedo;
}
else if (mode == 444)
{
    //??? test GYCloudRenderMode
    float3 lightDirs[1];
  float3 lightColors[1];
  lightDirs[0] = float3(-0.3213938, -0.7660444, 0.5566705);
  lightColors[0] = float3(0.8705883, 0.8784314, 0.882353);

    float3 N = minHit.N;
    float3 L = normalize(-lightDirs[0]);
    float3 V = normalize(-ray.dir);

    float NdotL = max(0, dot(N,L));
	float ori = extra.cloudLength;
    float clipRate = ori;
    float smoothNdotL = saturate(pow(NdotL,2-clipRate));
  
    float BackSSSStrength = 1.0;
    float3 backLitDir = N*BackSSSStrength+L;
    float backSSS = saturate(dot(V,-backLitDir));
    backSSS = 0.3*saturate(pow(backSSS,clipRate*10)*10);
    
    float NdotV = max(0, dot(N,V));
    float smoothNdotV = saturate(pow(NdotV, 2 - clipRate));
    
    float sha = 1.0;
    
  	float final =  saturate(smoothNdotV*0 + sha * saturate(lerp(smoothNdotL,ori,0.0)+backSSS)*(1-NdotV*0.5));

	float4 SHA[3];
	SHA[0] = float4(0.007252,-0.005682,0.012560, 0.169953);
	SHA[1] = float4(0.011403,0.041343,-0.019753, 0.211334);
	SHA[2] = float4(0.019656,0.127484,-0.034053, 0.289207);
	float4 SHB[3];
	SHB[0] = float4(0.005699,-0.009872,0.030990, -0.010436);
	SHB[1] = float4(0.009111,-0.015783,0.043139, -0.015223);
	SHB[2] = float4(0.016365,-0.028334,0.053146, -0.022085);
	float3 SHC = float3(0.025035,0.034436,0.040465);

	float3 indirCol = ShadeSH9(N,SHA,SHB,SHC);

	result.rgb = indirCol+lightColors[0]*final;
}
else if (mode == 1001)
{
	//result.rgb = minHit.N;
}
else if (mode == 1002)
{
	float3 T,B;
	GetObjTB(T, B, minHit);
	//result.rgb = T;
}
else
{
	//result.rgb = float3(1,0,1);
}
###BLOCK

###BLOCK  ObjPostRender
SmoothWithDither(result.rgb, suv);
if(camGammaMode == 1)
{
	 
}
else{
	//gamma
	//result.rgb = result.rgb / (result.rgb + 1.0);
	//result.rgb = pow(result.rgb, 1/2.2); 
}
###BLOCK

###BLOCK IndirectColor
	
###BLOCK

###BLOCK SDFShadow
if(true)
{
//@@@SDFBakerMgr DirShadow
int lightType[1];
lightType[0] = 0;
float3 lightPos[1];
lightPos[0] = float3(0, 0, 0);
float3 lightDirs[1];
lightDirs[0] = float3(-0.3213938, -0.7660444, 0.5566705);
int shadowType[1];
shadowType[0] =0;
float lightspace = 1;
float maxLength = MaxSDF;
float tsha = 1;
for (int i = 0; i < 1; i++)
{
  float maxLength = MaxSDF;
  if(lightType[i]==0)
  {
      maxLength = MaxSDF;
  }
  if(lightType[i]==1)
  {
      maxLength = length(minHit.P - lightPos[i]);
  }
  if(lightType[i]<0)
  {
      tsha = 1;
  }
  else
  {
      if(shadowType[i]==0)
      {
          tsha = GetDirHardShadow(lightDirs[i], minHit, maxLength);
      }
      if(shadowType[i]==1)
      {
          tsha = GetDirSoftShadow(lightDirs[i], minHit, maxLength);
      }
  }
  lightspace -= (1 - tsha);
}
lightspace /= 1;
sha = lightspace;
//@@@
}
sha = saturate(0.3+sha);
return sha;
###BLOCK

###BLOCK ExtraSDF
###BLOCK

###BLOCK ObjSDF
//### 
float re = MaxSDF; //Make sure default is an invalid SDF
//@@@SDFBakerMgr BeforeObjSDF
//@@@
//@@@SDFBakerMgr ObjSDF
if(inx == 0 )
{
extra.cloudLength = fbm4_01(5*p+_Time.y);
re = 0+ extra.cloudLength * 0.2 + SDFTex3D(p, float3(0, 0, -5), float3(5, 5, 5), HalfSphereSDF3D, TraceThre);
extra.cloudLength = 1 - extra.cloudLength;
}
//@@@

if(inx == -1)
{//???
//if(abs(p.x-eyePos.x)<300 && abs(p.z - eyePos.z)<300)
	{
		float3 center = float3(3, 0.0, 0);
		float r = 0.5f;
		float scale1 = 10;
		float scale2 = 0.1;
		
		float3 moveDirection = float3(0,1,0);
		r += fbm4_01(scale1*p.xyz+moveDirection*_Time.y)*scale2;
		re = 0.5*SDFSphere(p, center, r);
	}
}

return re;
###BLOCK

###BLOCK BeforeObjSDFNormal
	//normalEpsilon *= daoScale;
###BLOCK

###BLOCK ObjNormal
float3 p = ray.pos;
//@@@SDFBakerMgr ObjNormal
if(inx == 0 )
{
return GetObjSDFNormal(inx, ray.pos, traceInfo, extra, 100);
}
//@@@

//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
//@@@
	return GetObjSDFNormal(inx, ray.pos, traceInfo, extra);
###BLOCK

###BLOCK BeforeTraceScene
	//traceThre *= daoScale;
###BLOCK

###BLOCK CheckInnerBound
//@@@SDFBakerMgr CheckInnerBound
//@@@
###BLOCK

###BLOCK CheckInnerBound2
//@@@SDFBakerMgr CheckInnerBound
//@@@
###
